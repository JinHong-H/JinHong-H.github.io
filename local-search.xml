<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/12/12/hello-world/"/>
    <url>/2022/12/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java注解和反射常用API</title>
    <link href="/2022/12/12/Java%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84%E5%B8%B8%E7%94%A8API/"/>
    <url>/2022/12/12/Java%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84%E5%B8%B8%E7%94%A8API/</url>
    
    <content type="html"><![CDATA[<p>(整理自廖雪峰Java教程)</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>通过 <code>Class</code> 实例获取 <code>class</code> 信息的方法称为反射</p><h3 id="获取-Class-实例："><a href="#获取-Class-实例：" class="headerlink" title="获取 Class 实例："></a>获取 <code>Class</code> 实例：</h3><ol><li>直接通过一个class的静态变量class获取：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> String.class;<br></code></pre></td></tr></table></figure><ol start="2"><li>如果我们有一个实例变量，可以通过该实例变量提供的getClass()方法获取：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br><span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> s.getClass();<br></code></pre></td></tr></table></figure><ol start="3"><li>如果知道一个class的完整类名，可以通过静态方法Class.forName()获取：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="访问字段"><a href="#访问字段" class="headerlink" title="访问字段"></a>访问字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">Field <span class="hljs-title function_">getField</span><span class="hljs-params">(name)</span>：根据字段名获取某个<span class="hljs-keyword">public</span>的field（包括父类）<br>Field <span class="hljs-title function_">getDeclaredField</span><span class="hljs-params">(name)</span>：根据字段名获取当前类的某个field（不包括父类）<br>Field[] getFields()：获取所有<span class="hljs-keyword">public</span>的field（包括父类）<br>Field[] getDeclaredFields()：获取当前类的所有field（不包括父类）<br></code></pre></td></tr></table></figure><ul><li>Field 对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">getName()：返回字段名称，例如，<span class="hljs-string">&quot;name&quot;</span>；<br>getType()：返回字段类型，也是一个Class实例，例如，String.class；<br>getModifiers()：返回字段的修饰符，它是一个<span class="hljs-type">int</span>，不同的bit表示不同的含义。<br></code></pre></td></tr></table></figure><ul><li>暴力反射</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">调用Field.setAccessible(<span class="hljs-literal">true</span>)的意思是，别管这个字段是不是<span class="hljs-keyword">public</span>，一律允许访问。<br></code></pre></td></tr></table></figure><ul><li>字段操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//获取：对于一个Person实例，我们可以先拿到name字段对应的Field，再获取这个实例的name字段的值：</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Xiao Ming&quot;</span>);<br><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> p.getClass();<br><span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> f.get(p);<br>System.out.println(value); <span class="hljs-comment">// &quot;Xiao Ming&quot;</span><br><br><span class="hljs-comment">//设值：</span><br><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Xiao Ming&quot;</span>);<br>System.out.println(p.getName()); <span class="hljs-comment">// &quot;Xiao Ming&quot;</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> p.getClass();<br><span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>f.setAccessible(<span class="hljs-literal">true</span>);<br>f.set(p, <span class="hljs-string">&quot;Xiao Hong&quot;</span>);<br>System.out.println(p.getName()); <span class="hljs-comment">// &quot;Xiao Hong&quot;</span><br></code></pre></td></tr></table></figure><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">Method <span class="hljs-title function_">getMethod</span><span class="hljs-params">(name, Class...)</span>：获取某个<span class="hljs-keyword">public</span>的Method（包括父类）<br>Method <span class="hljs-title function_">getDeclaredMethod</span><span class="hljs-params">(name, Class...)</span>：获取当前类的某个Method（不包括父类）<br>Method[] getMethods()：获取所有<span class="hljs-keyword">public</span>的Method（包括父类）<br>Method[] getDeclaredMethods()：获取当前类的所有Method（不包括父类）<br></code></pre></td></tr></table></figure><ul><li>Method 对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">getName()：返回方法名称，例如：<span class="hljs-string">&quot;getScore&quot;</span>；<br>getReturnType()：返回方法返回值类型，也是一个Class实例，例如：String.class；<br>getParameterTypes()：返回方法的参数类型，是一个Class数组，例如：&#123;String.class, <span class="hljs-type">int</span>.class&#125;；<br>getModifiers()：返回方法的修饰符，它是一个<span class="hljs-type">int</span>，不同的bit表示不同的含义。<br></code></pre></td></tr></table></figure><h3 id="获取构造函数"><a href="#获取构造函数" class="headerlink" title="获取构造函数"></a>获取构造函数</h3><h3 id="获取继承关系"><a href="#获取继承关系" class="headerlink" title="获取继承关系"></a>获取继承关系</h3><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java IO</title>
    <link href="/2022/12/11/Java-IO/"/>
    <url>/2022/12/11/Java-IO/</url>
    
    <content type="html"><![CDATA[<h2 id="常用的-IO-类型"><a href="#常用的-IO-类型" class="headerlink" title="常用的 IO 类型"></a>常用的 IO 类型</h2><h2 id="常用的-IO-API"><a href="#常用的-IO-API" class="headerlink" title="常用的 IO API"></a>常用的 IO API</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2022/12/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2022/12/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
