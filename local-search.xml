<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/12/14/hello-world/"/>
    <url>/2022/12/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java注解和反射常用API</title>
    <link href="/2022/12/14/Java%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84%E5%B8%B8%E7%94%A8API/"/>
    <url>/2022/12/14/Java%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84%E5%B8%B8%E7%94%A8API/</url>
    
    <content type="html"><![CDATA[<p>(整理自廖雪峰Java教程)</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>通过 <code>Class</code> 实例获取 <code>class</code> 信息的方法称为反射</p><h3 id="获取-Class-实例："><a href="#获取-Class-实例：" class="headerlink" title="获取 Class 实例："></a>获取 <code>Class</code> 实例：</h3><ol><li>直接通过一个class的静态变量class获取：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> String.class;<br></code></pre></td></tr></table></figure><ol start="2"><li>如果我们有一个实例变量，可以通过该实例变量提供的getClass()方法获取：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br><span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> s.getClass();<br></code></pre></td></tr></table></figure><ol start="3"><li>如果知道一个class的完整类名，可以通过静态方法Class.forName()获取：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="访问字段"><a href="#访问字段" class="headerlink" title="访问字段"></a>访问字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">Field <span class="hljs-title function_">getField</span><span class="hljs-params">(name)</span>：根据字段名获取某个<span class="hljs-keyword">public</span>的field（包括父类）<br>Field <span class="hljs-title function_">getDeclaredField</span><span class="hljs-params">(name)</span>：根据字段名获取当前类的某个field（不包括父类）<br>Field[] getFields()：获取所有<span class="hljs-keyword">public</span>的field（包括父类）<br>Field[] getDeclaredFields()：获取当前类的所有field（不包括父类）<br></code></pre></td></tr></table></figure><ul><li>Field 对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">getName()：返回字段名称，例如，<span class="hljs-string">&quot;name&quot;</span>；<br>getType()：返回字段类型，也是一个Class实例，例如，String.class；<br>getModifiers()：返回字段的修饰符，它是一个<span class="hljs-type">int</span>，不同的bit表示不同的含义。<br></code></pre></td></tr></table></figure><ul><li>暴力反射</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">调用Field.setAccessible(<span class="hljs-literal">true</span>)的意思是，别管这个字段是不是<span class="hljs-keyword">public</span>，一律允许访问。<br></code></pre></td></tr></table></figure><ul><li>字段操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//获取：对于一个Person实例，我们可以先拿到name字段对应的Field，再获取这个实例的name字段的值：</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Xiao Ming&quot;</span>);<br><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> p.getClass();<br><span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> f.get(p);<br>System.out.println(value); <span class="hljs-comment">// &quot;Xiao Ming&quot;</span><br><br><span class="hljs-comment">//设值：</span><br><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Xiao Ming&quot;</span>);<br>System.out.println(p.getName()); <span class="hljs-comment">// &quot;Xiao Ming&quot;</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> p.getClass();<br><span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>f.setAccessible(<span class="hljs-literal">true</span>);<br>f.set(p, <span class="hljs-string">&quot;Xiao Hong&quot;</span>);<br>System.out.println(p.getName()); <span class="hljs-comment">// &quot;Xiao Hong&quot;</span><br></code></pre></td></tr></table></figure><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">Method <span class="hljs-title function_">getMethod</span><span class="hljs-params">(name, Class...)</span>：获取某个<span class="hljs-keyword">public</span>的Method（包括父类）<br>Method <span class="hljs-title function_">getDeclaredMethod</span><span class="hljs-params">(name, Class...)</span>：获取当前类的某个Method（不包括父类）<br>Method[] getMethods()：获取所有<span class="hljs-keyword">public</span>的Method（包括父类）<br>Method[] getDeclaredMethods()：获取当前类的所有Method（不包括父类）<br></code></pre></td></tr></table></figure><ul><li>Method 对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">getName()：返回方法名称，例如：<span class="hljs-string">&quot;getScore&quot;</span>；<br>getReturnType()：返回方法返回值类型，也是一个Class实例，例如：String.class；<br>getParameterTypes()：返回方法的参数类型，是一个Class数组，例如：&#123;String.class, <span class="hljs-type">int</span>.class&#125;；<br>getModifiers()：返回方法的修饰符，它是一个<span class="hljs-type">int</span>，不同的bit表示不同的含义。<br></code></pre></td></tr></table></figure><h3 id="获取构造函数"><a href="#获取构造函数" class="headerlink" title="获取构造函数"></a>获取构造函数</h3><p>通过Class实例获取Constructor的方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">getConstructor(Class...)：获取某个<span class="hljs-keyword">public</span>的Constructor；<br>getDeclaredConstructor(Class...)：获取某个Constructor；<br>getConstructors()：获取所有<span class="hljs-keyword">public</span>的Constructor；<br>getDeclaredConstructors()：获取所有Constructor。<br></code></pre></td></tr></table></figure><ul><li><p>注意Constructor总是当前类定义的构造方法，和父类无关，因此不存在多态的问题。<br>调用非public的Constructor时，必须首先通过 <code>setAccessible(true)</code> 设置允许访问。 <code>setAccessible(true)</code> 可能会失败。</p></li><li><p>示例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">// 获取构造方法Integer(String)</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">cons2</span> <span class="hljs-operator">=</span> Integer.class.getConstructor(String.class);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> (Integer) cons2.newInstance(<span class="hljs-string">&quot;456&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="获取继承关系"><a href="#获取继承关系" class="headerlink" title="获取继承关系"></a>获取继承关系</h3><p>通过Class对象可以获取继承关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">Class <span class="hljs-title function_">getSuperclass</span><span class="hljs-params">()</span>：获取父类类型；<br>Class[] getInterfaces()：获取当前类实现的所有接口。<br></code></pre></td></tr></table></figure><p>通过Class对象的 <code>isAssignableFrom()</code> 方法可以判断一个向上转型是否可以实现。</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>Java标准库提供了一种动态代理（Dynamic Proxy）的机制：可以在运行期动态创建某个interface的实例。</p><ul><li>在运行期动态创建一个interface实例的方法如下：</li></ul><ol><li>定义一个InvocationHandler实例，它负责实现接口的方法调用；</li><li>通过Proxy.newProxyInstance()创建interface实例，它需要3个参数：<ol><li>使用的ClassLoader，通常就是接口类的ClassLoader；</li><li>需要实现的接口数组，至少需要传入一个接口进去；</li><li>用来处理接口方法调用的InvocationHandler实例。</li></ol></li><li>将返回的Object强制转型为接口。</li></ol><ul><li>示例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                System.out.println(method);<br>                <span class="hljs-keyword">if</span> (method.getName().equals(<span class="hljs-string">&quot;morning&quot;</span>)) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;Good morning, &quot;</span> + args[<span class="hljs-number">0</span>]);<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Hello</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> (Hello) Proxy.newProxyInstance(<br>            Hello.class.getClassLoader(), <span class="hljs-comment">// 传入ClassLoader</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; Hello.class &#125;, <span class="hljs-comment">// 传入要实现的接口</span><br>            handler); <span class="hljs-comment">// 传入处理调用方法的InvocationHandler</span><br>        hello.morning(<span class="hljs-string">&quot;Bob&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">morning</span><span class="hljs-params">(String name)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li><p>注解（Annotation）是Java语言用于工具处理的标注：</p></li><li><p>注解可以配置参数，没有指定配置的参数使用默认值；</p></li><li><p>如果参数名称是value，且只有一个参数，那么可以省略参数名称。</p></li></ul><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Report &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">type</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;<br>    String <span class="hljs-title function_">level</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;info&quot;</span>;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注解的参数类似无参数方法，可以用default设定一个默认值（强烈推荐）。最常用的参数应当命名为value。</p><h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><p>  有一些注解可以修饰其他注解，这些注解就称为元注解（meta annotation）</p><ul><li>@Target<br>最常用的元注解是@Target。使用@Target可以定义Annotation能够被应用于源码的哪些位置：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">类或接口：ElementType. TYPE；<br>字段：ElementType. FIELD；<br>方法：ElementType. METHOD；<br>构造方法：ElementType. CONSTRUCTOR；<br>方法参数：ElementType. PARAMETER。<br></code></pre></td></tr></table></figure><p>定义注解用在方法或字段上，可以把@Target注解参数变为数组 <code>&#123; ElementType. METHOD, ElementType. FIELD &#125;</code></p><ul><li>@Retention<br>另一个重要的元注解@Retention定义了Annotation的生命周期：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">仅编译期：RetentionPolicy.SOURCE；<br>仅class文件：RetentionPolicy.CLASS；<br>运行期：RetentionPolicy.RUNTIME。<br></code></pre></td></tr></table></figure><p>如果@Retention不存在，则该Annotation默认为CLASS。因为通常我们自定义的Annotation都是RUNTIME，所以，务必要加上@Retention(RetentionPolicy. RUNTIME)这个元注解：</p><ul><li>@Inherited<br>使用@Inherited定义子类是否可继承父类定义的Annotation。@Inherited仅针对@Target(ElementType. TYPE)类型的annotation有效，并且仅针对class的继承，对interface的继承无效：</li></ul><h4 id="定义步骤"><a href="#定义步骤" class="headerlink" title="定义步骤"></a>定义步骤</h4><ol><li>用@interface定义注解：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Report &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>添加参数、默认值：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Report &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">type</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;<br>    String <span class="hljs-title function_">level</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;info&quot;</span>;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>把最常用的参数定义为value()，推荐所有参数都尽量设置默认值。</p><ol start="3"><li>用元注解配置注解：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Target(ElementType. TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy. RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Report &#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">type</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;<br>    String <span class="hljs-title function_">level</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;info&quot;</span>;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>其中，必须设置@Target和@Retention，@Retention一般设置为RUNTIME，因为我们自定义的注解通常要求在运行期读取。一般情况下，不必写@Inherited和@Repeatable。</p><h3 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h3><p>Java的注解本身对代码逻辑没有任何影响。根据@Retention的配置：</p><p>SOURCE类型的注解在编译期就被丢掉了；<br>CLASS类型的注解仅保存在class文件中，它们不会被加载进JVM；<br>RUNTIME类型的注解会被加载进JVM，并且在运行期可以被程序读取。</p><p>如何使用注解完全由工具决定。SOURCE类型的注解主要由编译器使用，因此我们一般只使用，不编写。CLASS类型的注解主要由底层工具库使用，涉及到class的加载，一般我们很少用到。只有RUNTIME类型的注解不但要使用，还经常需要编写。</p><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><ul><li>判断某个注解是否存在于Class、Field、Method或Constructor：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">Class.isAnnotationPresent(Class)<br>Field.isAnnotationPresent(Class)<br>Method.isAnnotationPresent(Class)<br>Constructor.isAnnotationPresent(Class)<br></code></pre></td></tr></table></figure><ul><li>读取Annotation：<br>读取到注解之后，结合反射相关API可以对类进行运行期的动态操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">Class.getAnnotation(Class)<br>Field.getAnnotation(Class)<br>Method.getAnnotation(Class)<br>Constructor.getAnnotation(Class)<br></code></pre></td></tr></table></figure><ul><li>注意：可以在运行期通过反射读取RUNTIME类型的注解，千万不要漏写@Retention(RetentionPolicy. RUNTIME)，否则运行期无法读取到该注解。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java IO</title>
    <link href="/2022/12/11/Java-IO/"/>
    <url>/2022/12/11/Java-IO/</url>
    
    <content type="html"><![CDATA[<h2 id="常用的-IO-类型"><a href="#常用的-IO-类型" class="headerlink" title="常用的 IO 类型"></a>常用的 IO 类型</h2><h2 id="常用的-IO-API"><a href="#常用的-IO-API" class="headerlink" title="常用的 IO API"></a>常用的 IO API</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2022/12/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2022/12/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
